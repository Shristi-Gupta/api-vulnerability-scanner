import { Command, flags } from "@oclif/command";
import XSSScanner from "../helpers/xss-scanner";
import {
  AggregateReportGenerator,
  ReportGenerator,
} from "../helpers/report-generator";
export default class Scan extends Command {
  static description = "describe the command here";

  static examples = [
    `$ api-vulnerability-scanner hello
  hello world from ./src/hello.ts!
  `,
  ];

  static flags = {
    vulnerability: flags.string({
      char: "t",
      description: "Vulnerability to scan",
    }),
    output: flags.string({
      char: "o",
      description: "Output PDF filename",
    }),
  };

  static args = [{ name: "url" }];

  async catch(error: any) {
    this.log("Error: ", error.toString());
    throw error;
  }

  async run() {
    const { args, flags } = this.parse(Scan);

    const url = args.url;
    if (!url) {
      throw "Missing required field - url.";
    }

    let vulnerabilities = flags?.vulnerability?.split(",");
    if (vulnerabilities.length == 0)
      throw "Missing required field - vulnerability";

    let reportGenerators: Array<ReportGenerator> = [];

    await Promise.all(
      vulnerabilities.map(async (vulnerability) => {
        switch (vulnerability) {
          case "xss":
            this.log("Vulnerability: ", vulnerability);
            let xssScanner = new XSSScanner();
            await xssScanner.scan(url);
            this.log(xssScanner.generateReport());
            reportGenerators.push(xssScanner.getReportGenerator());
            break;
          default:
            this.log("Invalid value for flag - vulnerability.");
        }
      })
    );

    if (flags.output) {
      let aggregateReportGenerator = new AggregateReportGenerator(
        reportGenerators
      );
      aggregateReportGenerator.generateReport(flags.output);
    }
  }
}
