import fetch from "node-fetch";
import * as queryString from "query-string";
import { ReportGenerator } from "./report-generator";
import { processAsyncInBatch } from "./utils";
import cli from "cli-ux";

var DEFAULT_VECTORS_LIST_URL =
  "https://raw.githubusercontent.com/Shristi-Gupta/api-vulnerability-scanner/master/store/xss-vectors.json";
class XSSScanner {
  reportGenerator: ReportGenerator;
  vectors: Array<string>;

  constructor() {
    this.reportGenerator = new ReportGenerator("XSS");
    this.vectors = [];
  }

  async retrieveVectorsList() {
    if (this.vectors.length == 0) {
      let response = await fetch(DEFAULT_VECTORS_LIST_URL);
      if (response.status != 200) throw "Unable to fetch vectors list.";
      let responseJSON = await response.json();
      this.vectors = responseJSON.map((e: any) => e.vector);
    }
    return this.vectors;
  }

  async scan(url: string) {
    let vectors = await this.retrieveVectorsList();

    const progress = cli.progress();
    progress.start(vectors.length, 0);
    var progress_n = 0;

    let batchOptions = { batchSize: 10 };

    let results = await processAsyncInBatch(
      vectors,
      async (vector) => {
        let urlWithVector = queryString.stringifyUrl({
          url: url,
          query: { q: vector },
        });

        let record = { vector, urlWithVector, status: "", error: "" };
        try {
          let response = await fetch(urlWithVector, {
            timeout: 20000,
          });
          if (response.status == 200) {
            let responseJSON = await response.text();
            if (responseJSON == vector) {
              record.status = "failed";
            } else {
              record.status = "passed";
            }
          } else {
            record.status = "error";
            record.error = `Request Failed: ${response.status}`;
          }
        } catch (error) {
          record.status = "error";
          record.error = `Internal: ${error.name}`;
        }
        this.reportGenerator.appendRecord(record);

        progress_n += 1;
        progress.update(progress_n);
        return record;
      },
      batchOptions
    );
    //   vectors.map(async (vector) => {
    //     let urlWithVector = queryString.stringifyUrl({
    //       url: url,
    //       query: { q: vector },
    //     });

    //     let record = { vector, urlWithVector, status: "" };
    //     try {
    //       let response = await fetch(urlWithVector, {
    //         timeout: 10000,
    //       });
    //       if (response.status == 200) {
    //         let responseJSON = await response.text();
    //         if (responseJSON == vector) {
    //           record.status = "failed";
    //         } else {
    //           record.status = "passed";
    //         }
    //       } else {
    //         record.status = "error";
    //       }
    //     } catch (error) {
    //       record.status = "error";
    //     }
    //     this.reportGenerator.appendRecord(record);

    //     progress_n += 1;
    //     progress.update(progress_n);
    //     return record;
    //   })
    // );
    progress.stop();
  }

  generateReport() {
    return this.reportGenerator.toString();
  }

  getReportGenerator() {
    return this.reportGenerator;
  }
}

export default XSSScanner;
