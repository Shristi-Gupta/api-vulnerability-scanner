import { table } from "table";
var pdf = require("pdf-creator-node");
class ReportGenerator {
  name: string;
  report: any;
  data: Array<object>;

  constructor(name: string) {
    this.name = name;
    this.report = {
      failed: 0,
      passed: 0,
      error: {},
    };
    this.data = [];
  }

  appendRecord(r: any) {
    this.data.push(r);
    if (r.error) {
      if (this.report.error[r.error]) {
        this.report.error[r.error] += 1;
      } else {
        this.report.error[r.error] = 1;
      }
      return;
    }
    this.report[r.status] += 1;
  }

  toString() {
    console.log(this.report.error);

    return table(
      [["Description", "Result"]].concat([
        ["Count of failed: ", this.report.failed],
        ["Count of passed: ", this.report.passed],
        [
          "Count of error: ",
          Object.entries(this.report.error)
            .map((error, count) => `${error} (${count}),`)
            .join("\n") || 0,
        ],
      ])
    );
  }
}

let tableTemplate = `
<!DOCTYPE html>
<html>
  <head>
    <mate charest="utf-8" />
    <title>Hello world!</title>
  </head>
  <body>
    <h1>Report</h1>
    <p>{{timestamp}}</p>
    
    {{#each results}}
    <p><b>{{this.name}} Vulnerability</b>: {{this.status}}</p>
    {{#if this.vectors}}
      <p style="font-size: 8px">Attack Vectors:</p>
      {{#each this.vectors}}
        <p style="font-size: 5px">{{this}}</p>
      {{/each}}
    {{/if}}
    {{/each}}
    </table>
  </body>
</html>`;
class AggregateReportGenerator {
  reportGenerators: Array<ReportGenerator>;
  options: any;
  constructor(reportGenerators: Array<ReportGenerator>) {
    this.reportGenerators = reportGenerators;
    this.options = {
      format: "A4",
      orientation: "portrait",
      border: "10mm",
      footer: {
        height: "12mm",
        ccontents:
          '<div style="text-align: center;">Auto-generated by: api-vulnerability-scanner</div>',
      },
    };
  }

  async generateReport(filename: string) {
    let results = this.reportGenerators.map((reportGenerator) => {
      let result = { name: reportGenerator.name };
      if (reportGenerator.data.every((d) => d.status == "passed")) {
        result.status = "Not Found";
        result.vectors = null;
      } else {
        result.status = "Found";
        result.vectors = reportGenerator.data.map((data) => data.vector);
      }
      return result;
    });

    var document = {
      html: tableTemplate,
      data: {
        results: results,
        timestamp: new Date(Date.now()).toLocaleString(),
      },
      path: filename,
      type: "",
    };

    let res = await pdf.create(document, this.options);
  }
}

export { ReportGenerator, AggregateReportGenerator };
